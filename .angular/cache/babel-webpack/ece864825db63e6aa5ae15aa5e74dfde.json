{"ast":null,"code":"import _asyncToGenerator from \"/Users/kylenewins/Documents/The Moat/the_moat_io/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport AccessTokenHelpers from \"./AccessTokenHelpers.js\";\nimport { emptyAccessToken } from \"./IAuthStrategy.js\";\nexport default class ImplicitGrantStrategy {\n  clientId;\n  redirectUri;\n  scopes;\n  static cacheKey = \"spotify-sdk:ImplicitGrantStrategy:token\";\n  configuration = null;\n\n  get cache() {\n    return this.configuration.cachingStrategy;\n  }\n\n  constructor(clientId, redirectUri, scopes) {\n    this.clientId = clientId;\n    this.redirectUri = redirectUri;\n    this.scopes = scopes;\n  }\n\n  setConfiguration(configuration) {\n    this.configuration = configuration;\n  }\n\n  getOrCreateAccessToken() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const token = yield _this.cache.getOrCreate(ImplicitGrantStrategy.cacheKey, /*#__PURE__*/_asyncToGenerator(function* () {\n        const token = yield _this.redirectOrVerifyToken();\n        return AccessTokenHelpers.toCachable(token);\n      }), /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (expiring) {\n          return AccessTokenHelpers.refreshCachedAccessToken(_this.clientId, expiring);\n        });\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n      return token;\n    })();\n  }\n\n  getAccessToken() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const token = yield _this2.cache.get(ImplicitGrantStrategy.cacheKey);\n      return token;\n    })();\n  }\n\n  removeAccessToken() {\n    this.cache.remove(ImplicitGrantStrategy.cacheKey);\n  }\n\n  redirectOrVerifyToken() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const hashParams = new URLSearchParams(window.location.hash.substring(1));\n      const accessToken = hashParams.get(\"access_token\");\n\n      if (accessToken) {\n        return Promise.resolve({\n          access_token: accessToken,\n          token_type: hashParams.get(\"token_type\") ?? \"\",\n          expires_in: parseInt(hashParams.get(\"expires_in\") ?? \"0\"),\n          refresh_token: hashParams.get(\"refresh_token\") ?? \"\",\n          expires: Number(hashParams.get(\"expires\")) || 0\n        });\n      }\n\n      const scopes = _this3.scopes ?? [];\n      var scope = scopes.join(' ');\n      const params = new URLSearchParams();\n      params.append(\"client_id\", _this3.clientId);\n      params.append(\"response_type\", \"token\");\n      params.append(\"redirect_uri\", _this3.redirectUri);\n      params.append(\"scope\", scope);\n      const authUrl = 'https://accounts.spotify.com/authorize?' + params.toString();\n\n      _this3.configuration.redirectionStrategy.redirect(authUrl);\n\n      return emptyAccessToken;\n    })();\n  }\n\n}","map":{"version":3,"sources":["/Users/kylenewins/Documents/The Moat/the_moat_io/node_modules/@spotify/web-api-ts-sdk/dist/mjs/auth/ImplicitGrantStrategy.js"],"names":["AccessTokenHelpers","emptyAccessToken","ImplicitGrantStrategy","clientId","redirectUri","scopes","cacheKey","configuration","cache","cachingStrategy","constructor","setConfiguration","getOrCreateAccessToken","token","getOrCreate","redirectOrVerifyToken","toCachable","expiring","refreshCachedAccessToken","getAccessToken","get","removeAccessToken","remove","hashParams","URLSearchParams","window","location","hash","substring","accessToken","Promise","resolve","access_token","token_type","expires_in","parseInt","refresh_token","expires","Number","scope","join","params","append","authUrl","toString","redirectionStrategy","redirect"],"mappings":"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","sourcesContent":["import AccessTokenHelpers from \"./AccessTokenHelpers.js\";\nimport { emptyAccessToken } from \"./IAuthStrategy.js\";\nexport default class ImplicitGrantStrategy {\n    clientId;\n    redirectUri;\n    scopes;\n    static cacheKey = \"spotify-sdk:ImplicitGrantStrategy:token\";\n    configuration = null;\n    get cache() { return this.configuration.cachingStrategy; }\n    constructor(clientId, redirectUri, scopes) {\n        this.clientId = clientId;\n        this.redirectUri = redirectUri;\n        this.scopes = scopes;\n    }\n    setConfiguration(configuration) {\n        this.configuration = configuration;\n    }\n    async getOrCreateAccessToken() {\n        const token = await this.cache.getOrCreate(ImplicitGrantStrategy.cacheKey, async () => {\n            const token = await this.redirectOrVerifyToken();\n            return AccessTokenHelpers.toCachable(token);\n        }, async (expiring) => {\n            return AccessTokenHelpers.refreshCachedAccessToken(this.clientId, expiring);\n        });\n        return token;\n    }\n    async getAccessToken() {\n        const token = await this.cache.get(ImplicitGrantStrategy.cacheKey);\n        return token;\n    }\n    removeAccessToken() {\n        this.cache.remove(ImplicitGrantStrategy.cacheKey);\n    }\n    async redirectOrVerifyToken() {\n        const hashParams = new URLSearchParams(window.location.hash.substring(1));\n        const accessToken = hashParams.get(\"access_token\");\n        if (accessToken) {\n            return Promise.resolve({\n                access_token: accessToken,\n                token_type: hashParams.get(\"token_type\") ?? \"\",\n                expires_in: parseInt(hashParams.get(\"expires_in\") ?? \"0\"),\n                refresh_token: hashParams.get(\"refresh_token\") ?? \"\",\n                expires: Number(hashParams.get(\"expires\")) || 0\n            });\n        }\n        const scopes = this.scopes ?? [];\n        var scope = scopes.join(' ');\n        const params = new URLSearchParams();\n        params.append(\"client_id\", this.clientId);\n        params.append(\"response_type\", \"token\");\n        params.append(\"redirect_uri\", this.redirectUri);\n        params.append(\"scope\", scope);\n        const authUrl = 'https://accounts.spotify.com/authorize?' + params.toString();\n        this.configuration.redirectionStrategy.redirect(authUrl);\n        return emptyAccessToken;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}