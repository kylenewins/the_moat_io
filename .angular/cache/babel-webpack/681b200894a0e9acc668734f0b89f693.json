{"ast":null,"code":"import _asyncToGenerator from \"/Users/kylenewins/Documents/The Moat/the_moat_io/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport AlbumsEndpoints from \"./endpoints/AlbumsEndpoints.js\";\nimport ArtistsEndpoints from \"./endpoints/ArtistsEndpoints.js\";\nimport AudiobooksEndpoints from \"./endpoints/AudiobooksEndpoints.js\";\nimport BrowseEndpoints from \"./endpoints/BrowseEndpoints.js\";\nimport ChaptersEndpoints from \"./endpoints/ChaptersEndpoints.js\";\nimport EpisodesEndpoints from \"./endpoints/EpisodesEndpoints.js\";\nimport RecommendationsEndpoints from \"./endpoints/RecommendationsEndpoints.js\";\nimport MarketsEndpoints from \"./endpoints/MarketsEndpoints.js\";\nimport PlayerEndpoints from \"./endpoints/PlayerEndpoints.js\";\nimport PlaylistsEndpoints from \"./endpoints/PlaylistsEndpoints.js\";\nimport SearchEndpoints from \"./endpoints/SearchEndpoints.js\";\nimport ShowsEndpoints from \"./endpoints/ShowsEndpoints.js\";\nimport TracksEndpoints from \"./endpoints/TracksEndpoints.js\";\nimport { isEmptyAccessToken } from \"./auth/IAuthStrategy.js\";\nimport UsersEndpoints from \"./endpoints/UsersEndpoints.js\";\nimport CurrentUserEndpoints from \"./endpoints/CurrentUserEndpoints.js\";\nimport ClientCredentialsStrategy from \"./auth/ClientCredentialsStrategy.js\";\nimport ImplicitGrantStrategy from \"./auth/ImplicitGrantStrategy.js\";\nimport AuthorizationCodeWithPKCEStrategy from \"./auth/AuthorizationCodeWithPKCEStrategy.js\";\nimport DefaultResponseDeserializer from \"./serialization/DefaultResponseDeserializer.js\";\nimport DefaultResponseValidator from \"./responsevalidation/DefaultResponseValidator.js\";\nimport NoOpErrorHandler from \"./errorhandling/NoOpErrorHandler.js\";\nimport DocumentLocationRedirectionStrategy from \"./redirection/DocumentLocationRedirectionStrategy.js\";\nimport LocalStorageCachingStrategy from \"./caching/LocalStorageCachingStrategy.js\";\nimport InMemoryCachingStrategy from \"./caching/InMemoryCachingStrategy.js\";\nimport ProvidedAccessTokenStrategy from \"./auth/ProvidedAccessTokenStrategy.js\";\nexport class SpotifyApi {\n  sdkConfig;\n  static rootUrl = \"https://api.spotify.com/v1/\";\n  authenticationStrategy;\n  albums;\n  artists;\n  audiobooks;\n  browse;\n  chapters;\n  episodes;\n  recommendations;\n  markets;\n  player;\n  playlists;\n  shows;\n  tracks;\n  users;\n  search;\n  currentUser;\n\n  constructor(authentication, config) {\n    this.sdkConfig = this.initializeSdk(config);\n    this.albums = new AlbumsEndpoints(this);\n    this.artists = new ArtistsEndpoints(this);\n    this.audiobooks = new AudiobooksEndpoints(this);\n    this.browse = new BrowseEndpoints(this);\n    this.chapters = new ChaptersEndpoints(this);\n    this.episodes = new EpisodesEndpoints(this);\n    this.recommendations = new RecommendationsEndpoints(this);\n    this.markets = new MarketsEndpoints(this);\n    this.player = new PlayerEndpoints(this);\n    this.playlists = new PlaylistsEndpoints(this);\n    this.shows = new ShowsEndpoints(this);\n    this.tracks = new TracksEndpoints(this);\n    this.users = new UsersEndpoints(this);\n    this.currentUser = new CurrentUserEndpoints(this);\n    const search = new SearchEndpoints(this);\n    this.search = search.execute.bind(search);\n    this.authenticationStrategy = authentication;\n    this.authenticationStrategy.setConfiguration(this.sdkConfig);\n  }\n\n  makeRequest(_x, _x2) {\n    var _this = this;\n\n    return _asyncToGenerator(function* (method, url, body = undefined, contentType = undefined) {\n      try {\n        const accessToken = yield _this.authenticationStrategy.getOrCreateAccessToken();\n\n        if (isEmptyAccessToken(accessToken)) {\n          console.warn(\"No access token found, authenticating now.\");\n          return null;\n        }\n\n        const token = accessToken?.access_token;\n        const fullUrl = SpotifyApi.rootUrl + url;\n        const opts = {\n          method: method,\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": contentType ?? \"application/json\"\n          },\n          body: body ? typeof body === \"string\" ? body : JSON.stringify(body) : undefined\n        };\n\n        _this.sdkConfig.beforeRequest(fullUrl, opts);\n\n        const result = yield _this.sdkConfig.fetch(fullUrl, opts);\n\n        _this.sdkConfig.afterRequest(fullUrl, opts, result);\n\n        if (result.status === 204) {\n          return null;\n        }\n\n        yield _this.sdkConfig.responseValidator.validateResponse(result);\n        return _this.sdkConfig.deserializer.deserialize(result);\n      } catch (error) {\n        const handled = yield _this.sdkConfig.errorHandler.handleErrors(error);\n\n        if (!handled) {\n          throw error;\n        }\n\n        return null;\n      }\n    }).apply(this, arguments);\n  }\n\n  initializeSdk(config) {\n    const isBrowser = typeof window !== 'undefined';\n    const defaultConfig = {\n      fetch: (req, init) => fetch(req, init),\n      beforeRequest: (_, __) => {},\n      afterRequest: (_, __, ___) => {},\n      deserializer: new DefaultResponseDeserializer(),\n      responseValidator: new DefaultResponseValidator(),\n      errorHandler: new NoOpErrorHandler(),\n      redirectionStrategy: new DocumentLocationRedirectionStrategy(),\n      cachingStrategy: isBrowser ? new LocalStorageCachingStrategy() : new InMemoryCachingStrategy()\n    };\n    return { ...defaultConfig,\n      ...config\n    };\n  }\n\n  switchAuthenticationStrategy(authentication) {\n    this.authenticationStrategy = authentication;\n    this.authenticationStrategy.setConfiguration(this.sdkConfig);\n    this.authenticationStrategy.getOrCreateAccessToken(); // trigger any redirects \n  }\n  /**\n   * Use this when you're running in a browser and you want to control when first authentication+redirect happens.\n  */\n\n\n  authenticate() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield _this2.authenticationStrategy.getOrCreateAccessToken(); // trigger any redirects\n\n      return {\n        authenticated: response.expires > Date.now() && !isEmptyAccessToken(response),\n        accessToken: response\n      };\n    })();\n  }\n  /**\n   * @returns the current access token. null implies the SpotifyApi is not yet authenticated.\n   */\n\n\n  getAccessToken() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this3.authenticationStrategy.getAccessToken();\n    })();\n  }\n  /**\n   * Removes the access token if it exists.\n   */\n\n\n  logOut() {\n    this.authenticationStrategy.removeAccessToken();\n  }\n\n  static withUserAuthorization(clientId, redirectUri, scopes = [], config) {\n    const strategy = new AuthorizationCodeWithPKCEStrategy(clientId, redirectUri, scopes);\n    return new SpotifyApi(strategy, config);\n  }\n\n  static withClientCredentials(clientId, clientSecret, scopes = [], config) {\n    const strategy = new ClientCredentialsStrategy(clientId, clientSecret, scopes);\n    return new SpotifyApi(strategy, config);\n  }\n\n  static withImplicitGrant(clientId, redirectUri, scopes = [], config) {\n    const strategy = new ImplicitGrantStrategy(clientId, redirectUri, scopes);\n    return new SpotifyApi(strategy, config);\n  }\n  /**\n   * Use this when you're running in a Node environment, and accepting the access token from a client-side `performUserAuthorization` call.\n   * You can also use this method if you already have an access token and don't want to use the built-in authentication strategies.\n   */\n\n\n  static withAccessToken(clientId, token, config) {\n    const strategy = new ProvidedAccessTokenStrategy(clientId, token);\n    return new SpotifyApi(strategy, config);\n  }\n\n  static performUserAuthorization(clientId, redirectUri, scopes, onAuthorizationOrUrl, config) {\n    return _asyncToGenerator(function* () {\n      const strategy = new AuthorizationCodeWithPKCEStrategy(clientId, redirectUri, scopes);\n      const client = new SpotifyApi(strategy, config);\n      const accessToken = yield client.authenticationStrategy.getOrCreateAccessToken();\n\n      if (!isEmptyAccessToken(accessToken)) {\n        if (typeof onAuthorizationOrUrl === \"string\") {\n          console.log(\"Posting access token to postback URL.\");\n          yield fetch(onAuthorizationOrUrl, {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(accessToken)\n          });\n        } else {\n          yield onAuthorizationOrUrl(accessToken);\n        }\n      }\n\n      return {\n        authenticated: accessToken.expires > Date.now() && !isEmptyAccessToken(accessToken),\n        accessToken\n      };\n    })();\n  }\n\n}","map":{"version":3,"sources":["/Users/kylenewins/Documents/The Moat/the_moat_io/node_modules/@spotify/web-api-ts-sdk/dist/mjs/SpotifyApi.js"],"names":["AlbumsEndpoints","ArtistsEndpoints","AudiobooksEndpoints","BrowseEndpoints","ChaptersEndpoints","EpisodesEndpoints","RecommendationsEndpoints","MarketsEndpoints","PlayerEndpoints","PlaylistsEndpoints","SearchEndpoints","ShowsEndpoints","TracksEndpoints","isEmptyAccessToken","UsersEndpoints","CurrentUserEndpoints","ClientCredentialsStrategy","ImplicitGrantStrategy","AuthorizationCodeWithPKCEStrategy","DefaultResponseDeserializer","DefaultResponseValidator","NoOpErrorHandler","DocumentLocationRedirectionStrategy","LocalStorageCachingStrategy","InMemoryCachingStrategy","ProvidedAccessTokenStrategy","SpotifyApi","sdkConfig","rootUrl","authenticationStrategy","albums","artists","audiobooks","browse","chapters","episodes","recommendations","markets","player","playlists","shows","tracks","users","search","currentUser","constructor","authentication","config","initializeSdk","execute","bind","setConfiguration","makeRequest","method","url","body","undefined","contentType","accessToken","getOrCreateAccessToken","console","warn","token","access_token","fullUrl","opts","headers","Authorization","JSON","stringify","beforeRequest","result","fetch","afterRequest","status","responseValidator","validateResponse","deserializer","deserialize","error","handled","errorHandler","handleErrors","isBrowser","window","defaultConfig","req","init","_","__","___","redirectionStrategy","cachingStrategy","switchAuthenticationStrategy","authenticate","response","authenticated","expires","Date","now","getAccessToken","logOut","removeAccessToken","withUserAuthorization","clientId","redirectUri","scopes","strategy","withClientCredentials","clientSecret","withImplicitGrant","withAccessToken","performUserAuthorization","onAuthorizationOrUrl","client","log"],"mappings":"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","sourcesContent":["import AlbumsEndpoints from \"./endpoints/AlbumsEndpoints.js\";\nimport ArtistsEndpoints from \"./endpoints/ArtistsEndpoints.js\";\nimport AudiobooksEndpoints from \"./endpoints/AudiobooksEndpoints.js\";\nimport BrowseEndpoints from \"./endpoints/BrowseEndpoints.js\";\nimport ChaptersEndpoints from \"./endpoints/ChaptersEndpoints.js\";\nimport EpisodesEndpoints from \"./endpoints/EpisodesEndpoints.js\";\nimport RecommendationsEndpoints from \"./endpoints/RecommendationsEndpoints.js\";\nimport MarketsEndpoints from \"./endpoints/MarketsEndpoints.js\";\nimport PlayerEndpoints from \"./endpoints/PlayerEndpoints.js\";\nimport PlaylistsEndpoints from \"./endpoints/PlaylistsEndpoints.js\";\nimport SearchEndpoints from \"./endpoints/SearchEndpoints.js\";\nimport ShowsEndpoints from \"./endpoints/ShowsEndpoints.js\";\nimport TracksEndpoints from \"./endpoints/TracksEndpoints.js\";\nimport { isEmptyAccessToken } from \"./auth/IAuthStrategy.js\";\nimport UsersEndpoints from \"./endpoints/UsersEndpoints.js\";\nimport CurrentUserEndpoints from \"./endpoints/CurrentUserEndpoints.js\";\nimport ClientCredentialsStrategy from \"./auth/ClientCredentialsStrategy.js\";\nimport ImplicitGrantStrategy from \"./auth/ImplicitGrantStrategy.js\";\nimport AuthorizationCodeWithPKCEStrategy from \"./auth/AuthorizationCodeWithPKCEStrategy.js\";\nimport DefaultResponseDeserializer from \"./serialization/DefaultResponseDeserializer.js\";\nimport DefaultResponseValidator from \"./responsevalidation/DefaultResponseValidator.js\";\nimport NoOpErrorHandler from \"./errorhandling/NoOpErrorHandler.js\";\nimport DocumentLocationRedirectionStrategy from \"./redirection/DocumentLocationRedirectionStrategy.js\";\nimport LocalStorageCachingStrategy from \"./caching/LocalStorageCachingStrategy.js\";\nimport InMemoryCachingStrategy from \"./caching/InMemoryCachingStrategy.js\";\nimport ProvidedAccessTokenStrategy from \"./auth/ProvidedAccessTokenStrategy.js\";\nexport class SpotifyApi {\n    sdkConfig;\n    static rootUrl = \"https://api.spotify.com/v1/\";\n    authenticationStrategy;\n    albums;\n    artists;\n    audiobooks;\n    browse;\n    chapters;\n    episodes;\n    recommendations;\n    markets;\n    player;\n    playlists;\n    shows;\n    tracks;\n    users;\n    search;\n    currentUser;\n    constructor(authentication, config) {\n        this.sdkConfig = this.initializeSdk(config);\n        this.albums = new AlbumsEndpoints(this);\n        this.artists = new ArtistsEndpoints(this);\n        this.audiobooks = new AudiobooksEndpoints(this);\n        this.browse = new BrowseEndpoints(this);\n        this.chapters = new ChaptersEndpoints(this);\n        this.episodes = new EpisodesEndpoints(this);\n        this.recommendations = new RecommendationsEndpoints(this);\n        this.markets = new MarketsEndpoints(this);\n        this.player = new PlayerEndpoints(this);\n        this.playlists = new PlaylistsEndpoints(this);\n        this.shows = new ShowsEndpoints(this);\n        this.tracks = new TracksEndpoints(this);\n        this.users = new UsersEndpoints(this);\n        this.currentUser = new CurrentUserEndpoints(this);\n        const search = new SearchEndpoints(this);\n        this.search = search.execute.bind(search);\n        this.authenticationStrategy = authentication;\n        this.authenticationStrategy.setConfiguration(this.sdkConfig);\n    }\n    async makeRequest(method, url, body = undefined, contentType = undefined) {\n        try {\n            const accessToken = await this.authenticationStrategy.getOrCreateAccessToken();\n            if (isEmptyAccessToken(accessToken)) {\n                console.warn(\"No access token found, authenticating now.\");\n                return null;\n            }\n            const token = accessToken?.access_token;\n            const fullUrl = SpotifyApi.rootUrl + url;\n            const opts = {\n                method: method,\n                headers: {\n                    Authorization: `Bearer ${token}`,\n                    \"Content-Type\": contentType ?? \"application/json\"\n                },\n                body: body ? typeof body === \"string\" ? body : JSON.stringify(body) : undefined\n            };\n            this.sdkConfig.beforeRequest(fullUrl, opts);\n            const result = await this.sdkConfig.fetch(fullUrl, opts);\n            this.sdkConfig.afterRequest(fullUrl, opts, result);\n            if (result.status === 204) {\n                return null;\n            }\n            await this.sdkConfig.responseValidator.validateResponse(result);\n            return this.sdkConfig.deserializer.deserialize(result);\n        }\n        catch (error) {\n            const handled = await this.sdkConfig.errorHandler.handleErrors(error);\n            if (!handled) {\n                throw error;\n            }\n            return null;\n        }\n    }\n    initializeSdk(config) {\n        const isBrowser = typeof window !== 'undefined';\n        const defaultConfig = {\n            fetch: (req, init) => fetch(req, init),\n            beforeRequest: (_, __) => { },\n            afterRequest: (_, __, ___) => { },\n            deserializer: new DefaultResponseDeserializer(),\n            responseValidator: new DefaultResponseValidator(),\n            errorHandler: new NoOpErrorHandler(),\n            redirectionStrategy: new DocumentLocationRedirectionStrategy(),\n            cachingStrategy: isBrowser\n                ? new LocalStorageCachingStrategy()\n                : new InMemoryCachingStrategy()\n        };\n        return { ...defaultConfig, ...config };\n    }\n    switchAuthenticationStrategy(authentication) {\n        this.authenticationStrategy = authentication;\n        this.authenticationStrategy.setConfiguration(this.sdkConfig);\n        this.authenticationStrategy.getOrCreateAccessToken(); // trigger any redirects \n    }\n    /**\n     * Use this when you're running in a browser and you want to control when first authentication+redirect happens.\n    */\n    async authenticate() {\n        const response = await this.authenticationStrategy.getOrCreateAccessToken(); // trigger any redirects\n        return {\n            authenticated: response.expires > Date.now() && !isEmptyAccessToken(response),\n            accessToken: response\n        };\n    }\n    /**\n     * @returns the current access token. null implies the SpotifyApi is not yet authenticated.\n     */\n    async getAccessToken() {\n        return this.authenticationStrategy.getAccessToken();\n    }\n    /**\n     * Removes the access token if it exists.\n     */\n    logOut() {\n        this.authenticationStrategy.removeAccessToken();\n    }\n    static withUserAuthorization(clientId, redirectUri, scopes = [], config) {\n        const strategy = new AuthorizationCodeWithPKCEStrategy(clientId, redirectUri, scopes);\n        return new SpotifyApi(strategy, config);\n    }\n    static withClientCredentials(clientId, clientSecret, scopes = [], config) {\n        const strategy = new ClientCredentialsStrategy(clientId, clientSecret, scopes);\n        return new SpotifyApi(strategy, config);\n    }\n    static withImplicitGrant(clientId, redirectUri, scopes = [], config) {\n        const strategy = new ImplicitGrantStrategy(clientId, redirectUri, scopes);\n        return new SpotifyApi(strategy, config);\n    }\n    /**\n     * Use this when you're running in a Node environment, and accepting the access token from a client-side `performUserAuthorization` call.\n     * You can also use this method if you already have an access token and don't want to use the built-in authentication strategies.\n     */\n    static withAccessToken(clientId, token, config) {\n        const strategy = new ProvidedAccessTokenStrategy(clientId, token);\n        return new SpotifyApi(strategy, config);\n    }\n    static async performUserAuthorization(clientId, redirectUri, scopes, onAuthorizationOrUrl, config) {\n        const strategy = new AuthorizationCodeWithPKCEStrategy(clientId, redirectUri, scopes);\n        const client = new SpotifyApi(strategy, config);\n        const accessToken = await client.authenticationStrategy.getOrCreateAccessToken();\n        if (!isEmptyAccessToken(accessToken)) {\n            if (typeof onAuthorizationOrUrl === \"string\") {\n                console.log(\"Posting access token to postback URL.\");\n                await fetch(onAuthorizationOrUrl, {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(accessToken)\n                });\n            }\n            else {\n                await onAuthorizationOrUrl(accessToken);\n            }\n        }\n        return {\n            authenticated: accessToken.expires > Date.now() && !isEmptyAccessToken(accessToken),\n            accessToken\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}