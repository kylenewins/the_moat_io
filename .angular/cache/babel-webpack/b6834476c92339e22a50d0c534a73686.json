{"ast":null,"code":"import _asyncToGenerator from \"/Users/kylenewins/Documents/The Moat/the_moat_io/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport EndpointsBase from './EndpointsBase.js';\nexport default class PlayerEndpoints extends EndpointsBase {\n  getPlaybackState(market, additional_types) {\n    const params = this.paramsFor({\n      market,\n      additional_types\n    });\n    return this.getRequest(`me/player${params}`);\n  }\n\n  getAvailableDevices() {\n    return this.getRequest('me/player/devices');\n  }\n\n  getCurrentlyPlayingTrack(market, additional_types) {\n    const params = this.paramsFor({\n      market,\n      additional_types\n    });\n    return this.getRequest(`me/player/currently-playing${params}`);\n  }\n\n  getRecentlyPlayedTracks(limit, queryRange) {\n    const paramObj = {\n      limit\n    };\n\n    if (queryRange) {\n      if (queryRange.type === \"before\") {\n        paramObj.before = queryRange.timestamp;\n      } else if (queryRange.type === \"after\") {\n        paramObj.after = queryRange.timestamp;\n      }\n    }\n\n    const params = this.paramsFor(paramObj);\n    return this.getRequest(`me/player/recently-played${params}`);\n  }\n\n  getUsersQueue() {\n    return this.getRequest('me/player/queue');\n  }\n\n  transferPlayback(device_ids, play) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (device_ids.length > 1) {\n        throw new Error(\"Although an array is accepted, only a single device_id is currently supported. Supplying more than one will return 400 Bad Request\");\n      }\n\n      yield _this.putRequest('me/player', {\n        device_ids,\n        play\n      });\n    })();\n  }\n\n  startResumePlayback(device_id, context_uri, uris, offset, positionMs) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const params = _this2.paramsFor({\n        device_id\n      });\n\n      yield _this2.putRequest(`me/player/play${params}`, {\n        context_uri,\n        uris,\n        offset,\n        positionMs\n      });\n    })();\n  }\n\n  pausePlayback(device_id) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const params = _this3.paramsFor({\n        device_id\n      });\n\n      yield _this3.putRequest(`me/player/pause${params}`);\n    })();\n  }\n\n  skipToNext(device_id) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const params = _this4.paramsFor({\n        device_id\n      });\n\n      yield _this4.postRequest(`me/player/next${params}`);\n    })();\n  }\n\n  skipToPrevious(device_id) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const params = _this5.paramsFor({\n        device_id\n      });\n\n      yield _this5.postRequest(`me/player/previous${params}`);\n    })();\n  }\n\n  seekToPosition(position_ms, device_id) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      const params = _this6.paramsFor({\n        position_ms,\n        device_id\n      });\n\n      yield _this6.putRequest(`me/player/seek${params}`);\n    })();\n  }\n\n  setRepeatMode(state, device_id) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      const params = _this7.paramsFor({\n        state,\n        device_id\n      });\n\n      yield _this7.putRequest(`me/player/repeat${params}`);\n    })();\n  }\n\n  setPlaybackVolume(volume_percent, device_id) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      const params = _this8.paramsFor({\n        volume_percent,\n        device_id\n      });\n\n      yield _this8.putRequest(`me/player/volume${params}`);\n    })();\n  }\n\n  togglePlaybackShuffle(state, device_id) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      const params = _this9.paramsFor({\n        state,\n        device_id\n      });\n\n      yield _this9.putRequest(`me/player/shuffle${params}`);\n    })();\n  }\n\n  addItemToPlaybackQueue(uri, device_id) {\n    var _this0 = this;\n\n    return _asyncToGenerator(function* () {\n      const params = _this0.paramsFor({\n        uri,\n        device_id\n      });\n\n      yield _this0.postRequest(`me/player/queue${params}`);\n    })();\n  }\n\n}","map":{"version":3,"sources":["/Users/kylenewins/Documents/The Moat/the_moat_io/node_modules/@spotify/web-api-ts-sdk/dist/mjs/endpoints/PlayerEndpoints.js"],"names":["EndpointsBase","PlayerEndpoints","getPlaybackState","market","additional_types","params","paramsFor","getRequest","getAvailableDevices","getCurrentlyPlayingTrack","getRecentlyPlayedTracks","limit","queryRange","paramObj","type","before","timestamp","after","getUsersQueue","transferPlayback","device_ids","play","length","Error","putRequest","startResumePlayback","device_id","context_uri","uris","offset","positionMs","pausePlayback","skipToNext","postRequest","skipToPrevious","seekToPosition","position_ms","setRepeatMode","state","setPlaybackVolume","volume_percent","togglePlaybackShuffle","addItemToPlaybackQueue","uri"],"mappings":"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","sourcesContent":["import EndpointsBase from './EndpointsBase.js';\nexport default class PlayerEndpoints extends EndpointsBase {\n    getPlaybackState(market, additional_types) {\n        const params = this.paramsFor({ market, additional_types });\n        return this.getRequest(`me/player${params}`);\n    }\n    getAvailableDevices() {\n        return this.getRequest('me/player/devices');\n    }\n    getCurrentlyPlayingTrack(market, additional_types) {\n        const params = this.paramsFor({ market, additional_types });\n        return this.getRequest(`me/player/currently-playing${params}`);\n    }\n    getRecentlyPlayedTracks(limit, queryRange) {\n        const paramObj = { limit };\n        if (queryRange) {\n            if (queryRange.type === \"before\") {\n                paramObj.before = queryRange.timestamp;\n            }\n            else if (queryRange.type === \"after\") {\n                paramObj.after = queryRange.timestamp;\n            }\n        }\n        const params = this.paramsFor(paramObj);\n        return this.getRequest(`me/player/recently-played${params}`);\n    }\n    getUsersQueue() {\n        return this.getRequest('me/player/queue');\n    }\n    async transferPlayback(device_ids, play) {\n        if (device_ids.length > 1) {\n            throw new Error(\"Although an array is accepted, only a single device_id is currently supported. Supplying more than one will return 400 Bad Request\");\n        }\n        await this.putRequest('me/player', { device_ids, play });\n    }\n    async startResumePlayback(device_id, context_uri, uris, offset, positionMs) {\n        const params = this.paramsFor({ device_id });\n        await this.putRequest(`me/player/play${params}`, { context_uri, uris, offset, positionMs });\n    }\n    async pausePlayback(device_id) {\n        const params = this.paramsFor({ device_id });\n        await this.putRequest(`me/player/pause${params}`);\n    }\n    async skipToNext(device_id) {\n        const params = this.paramsFor({ device_id });\n        await this.postRequest(`me/player/next${params}`);\n    }\n    async skipToPrevious(device_id) {\n        const params = this.paramsFor({ device_id });\n        await this.postRequest(`me/player/previous${params}`);\n    }\n    async seekToPosition(position_ms, device_id) {\n        const params = this.paramsFor({ position_ms, device_id });\n        await this.putRequest(`me/player/seek${params}`);\n    }\n    async setRepeatMode(state, device_id) {\n        const params = this.paramsFor({ state, device_id });\n        await this.putRequest(`me/player/repeat${params}`);\n    }\n    async setPlaybackVolume(volume_percent, device_id) {\n        const params = this.paramsFor({ volume_percent, device_id });\n        await this.putRequest(`me/player/volume${params}`);\n    }\n    async togglePlaybackShuffle(state, device_id) {\n        const params = this.paramsFor({ state, device_id });\n        await this.putRequest(`me/player/shuffle${params}`);\n    }\n    async addItemToPlaybackQueue(uri, device_id) {\n        const params = this.paramsFor({ uri, device_id });\n        await this.postRequest(`me/player/queue${params}`);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}