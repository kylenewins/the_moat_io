{"ast":null,"code":"import _asyncToGenerator from \"/Users/kylenewins/Documents/The Moat/the_moat_io/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport AlbumsEndpoints from \"./endpoints/AlbumsEndpoints.js\";\nimport ArtistsEndpoints from \"./endpoints/ArtistsEndpoints.js\";\nimport AudiobooksEndpoints from \"./endpoints/AudiobooksEndpoints.js\";\nimport BrowseEndpoints from \"./endpoints/BrowseEndpoints.js\";\nimport ChaptersEndpoints from \"./endpoints/ChaptersEndpoints.js\";\nimport EpisodesEndpoints from \"./endpoints/EpisodesEndpoints.js\";\nimport RecommendationsEndpoints from \"./endpoints/RecommendationsEndpoints.js\";\nimport MarketsEndpoints from \"./endpoints/MarketsEndpoints.js\";\nimport PlayerEndpoints from \"./endpoints/PlayerEndpoints.js\";\nimport PlaylistsEndpoints from \"./endpoints/PlaylistsEndpoints.js\";\nimport SearchEndpoints from \"./endpoints/SearchEndpoints.js\";\nimport ShowsEndpoints from \"./endpoints/ShowsEndpoints.js\";\nimport TracksEndpoints from \"./endpoints/TracksEndpoints.js\";\nimport { isEmptyAccessToken } from \"./auth/IAuthStrategy.js\";\nimport UsersEndpoints from \"./endpoints/UsersEndpoints.js\";\nimport CurrentUserEndpoints from \"./endpoints/CurrentUserEndpoints.js\";\nimport ClientCredentialsStrategy from \"./auth/ClientCredentialsStrategy.js\";\nimport ImplicitGrantStrategy from \"./auth/ImplicitGrantStrategy.js\";\nimport AuthorizationCodeWithPKCEStrategy from \"./auth/AuthorizationCodeWithPKCEStrategy.js\";\nimport DefaultResponseDeserializer from \"./serialization/DefaultResponseDeserializer.js\";\nimport DefaultResponseValidator from \"./responsevalidation/DefaultResponseValidator.js\";\nimport NoOpErrorHandler from \"./errorhandling/NoOpErrorHandler.js\";\nimport DocumentLocationRedirectionStrategy from \"./redirection/DocumentLocationRedirectionStrategy.js\";\nimport LocalStorageCachingStrategy from \"./caching/LocalStorageCachingStrategy.js\";\nimport InMemoryCachingStrategy from \"./caching/InMemoryCachingStrategy.js\";\nimport ProvidedAccessTokenStrategy from \"./auth/ProvidedAccessTokenStrategy.js\";\nexport class SpotifyApi {\n  sdkConfig;\n  static rootUrl = \"https://api.spotify.com/v1/\";\n  authenticationStrategy;\n  albums;\n  artists;\n  audiobooks;\n  browse;\n  chapters;\n  episodes;\n  recommendations;\n  markets;\n  player;\n  playlists;\n  shows;\n  tracks;\n  users;\n  search;\n  currentUser;\n\n  constructor(authentication, config) {\n    this.sdkConfig = this.initializeSdk(config);\n    this.albums = new AlbumsEndpoints(this);\n    this.artists = new ArtistsEndpoints(this);\n    this.audiobooks = new AudiobooksEndpoints(this);\n    this.browse = new BrowseEndpoints(this);\n    this.chapters = new ChaptersEndpoints(this);\n    this.episodes = new EpisodesEndpoints(this);\n    this.recommendations = new RecommendationsEndpoints(this);\n    this.markets = new MarketsEndpoints(this);\n    this.player = new PlayerEndpoints(this);\n    this.playlists = new PlaylistsEndpoints(this);\n    this.shows = new ShowsEndpoints(this);\n    this.tracks = new TracksEndpoints(this);\n    this.users = new UsersEndpoints(this);\n    this.currentUser = new CurrentUserEndpoints(this);\n    const search = new SearchEndpoints(this);\n    this.search = search.execute.bind(search);\n    this.authenticationStrategy = authentication;\n    this.authenticationStrategy.setConfiguration(this.sdkConfig);\n  }\n\n  makeRequest(_x, _x2) {\n    var _this = this;\n\n    return _asyncToGenerator(function* (method, url, body = undefined, contentType = undefined) {\n      try {\n        const accessToken = yield _this.authenticationStrategy.getOrCreateAccessToken();\n\n        if (isEmptyAccessToken(accessToken)) {\n          console.warn(\"No access token found, authenticating now.\");\n          return null;\n        }\n\n        const token = accessToken?.access_token;\n        const fullUrl = SpotifyApi.rootUrl + url;\n        const opts = {\n          method: method,\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": contentType ?? \"application/json\"\n          },\n          body: body ? typeof body === \"string\" ? body : JSON.stringify(body) : undefined\n        };\n\n        _this.sdkConfig.beforeRequest(fullUrl, opts);\n\n        const result = yield _this.sdkConfig.fetch(fullUrl, opts);\n\n        _this.sdkConfig.afterRequest(fullUrl, opts, result);\n\n        if (result.status === 204) {\n          return null;\n        }\n\n        yield _this.sdkConfig.responseValidator.validateResponse(result);\n        return _this.sdkConfig.deserializer.deserialize(result);\n      } catch (error) {\n        const handled = yield _this.sdkConfig.errorHandler.handleErrors(error);\n\n        if (!handled) {\n          throw error;\n        }\n\n        return null;\n      }\n    }).apply(this, arguments);\n  }\n\n  initializeSdk(config) {\n    const isBrowser = typeof window !== 'undefined';\n    const defaultConfig = {\n      fetch: (req, init) => fetch(req, init),\n      beforeRequest: (_, __) => {},\n      afterRequest: (_, __, ___) => {},\n      deserializer: new DefaultResponseDeserializer(),\n      responseValidator: new DefaultResponseValidator(),\n      errorHandler: new NoOpErrorHandler(),\n      redirectionStrategy: new DocumentLocationRedirectionStrategy(),\n      cachingStrategy: isBrowser ? new LocalStorageCachingStrategy() : new InMemoryCachingStrategy()\n    };\n    return { ...defaultConfig,\n      ...config\n    };\n  }\n\n  switchAuthenticationStrategy(authentication) {\n    this.authenticationStrategy = authentication;\n    this.authenticationStrategy.setConfiguration(this.sdkConfig);\n    this.authenticationStrategy.getOrCreateAccessToken(); // trigger any redirects \n  }\n  /**\n   * Use this when you're running in a browser and you want to control when first authentication+redirect happens.\n  */\n\n\n  authenticate() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield _this2.authenticationStrategy.getOrCreateAccessToken(); // trigger any redirects\n\n      return {\n        authenticated: response.expires > Date.now() && !isEmptyAccessToken(response),\n        accessToken: response\n      };\n    })();\n  }\n  /**\n   * @returns the current access token. null implies the SpotifyApi is not yet authenticated.\n   */\n\n\n  getAccessToken() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this3.authenticationStrategy.getAccessToken();\n    })();\n  }\n  /**\n   * Removes the access token if it exists.\n   */\n\n\n  logOut() {\n    this.authenticationStrategy.removeAccessToken();\n  }\n\n  static withUserAuthorization(clientId, redirectUri, scopes = [], config) {\n    const strategy = new AuthorizationCodeWithPKCEStrategy(clientId, redirectUri, scopes);\n    return new SpotifyApi(strategy, config);\n  }\n\n  static withClientCredentials(clientId, clientSecret, scopes = [], config) {\n    const strategy = new ClientCredentialsStrategy(clientId, clientSecret, scopes);\n    return new SpotifyApi(strategy, config);\n  }\n\n  static withImplicitGrant(clientId, redirectUri, scopes = [], config) {\n    const strategy = new ImplicitGrantStrategy(clientId, redirectUri, scopes);\n    return new SpotifyApi(strategy, config);\n  }\n  /**\n   * Use this when you're running in a Node environment, and accepting the access token from a client-side `performUserAuthorization` call.\n   * You can also use this method if you already have an access token and don't want to use the built-in authentication strategies.\n   */\n\n\n  static withAccessToken(clientId, token, config) {\n    const strategy = new ProvidedAccessTokenStrategy(clientId, token);\n    return new SpotifyApi(strategy, config);\n  }\n\n  static performUserAuthorization(clientId, redirectUri, scopes, onAuthorizationOrUrl, config) {\n    return _asyncToGenerator(function* () {\n      const strategy = new AuthorizationCodeWithPKCEStrategy(clientId, redirectUri, scopes);\n      const client = new SpotifyApi(strategy, config);\n      const accessToken = yield client.authenticationStrategy.getOrCreateAccessToken();\n\n      if (!isEmptyAccessToken(accessToken)) {\n        if (typeof onAuthorizationOrUrl === \"string\") {\n          console.log(\"Posting access token to postback URL.\");\n          yield fetch(onAuthorizationOrUrl, {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(accessToken)\n          });\n        } else {\n          yield onAuthorizationOrUrl(accessToken);\n        }\n      }\n\n      return {\n        authenticated: accessToken.expires > Date.now() && !isEmptyAccessToken(accessToken),\n        accessToken\n      };\n    })();\n  }\n\n} //# sourceMappingURL=SpotifyApi.js.map","map":null,"metadata":{},"sourceType":"module"}