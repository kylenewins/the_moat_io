{"ast":null,"code":"import _asyncToGenerator from \"/Users/kylenewins/Documents/The Moat/the_moat_io/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport AccessTokenHelpers from \"./AccessTokenHelpers.js\";\nexport default class ClientCredentialsStrategy {\n  clientId;\n  clientSecret;\n  scopes;\n  static cacheKey = \"spotify-sdk:ClientCredentialsStrategy:token\";\n  configuration = null;\n\n  get cache() {\n    return this.configuration.cachingStrategy;\n  }\n\n  constructor(clientId, clientSecret, scopes = []) {\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n    this.scopes = scopes;\n  }\n\n  setConfiguration(configuration) {\n    this.configuration = configuration;\n  }\n\n  getOrCreateAccessToken() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const token = yield _this.cache.getOrCreate(ClientCredentialsStrategy.cacheKey, /*#__PURE__*/_asyncToGenerator(function* () {\n        const token = yield _this.getTokenFromApi();\n        return AccessTokenHelpers.toCachable(token);\n      }), /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (_) {\n          const refreshed = yield _this.getTokenFromApi();\n          return AccessTokenHelpers.toCachable(refreshed);\n        });\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n      return token;\n    })();\n  }\n\n  getAccessToken() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const token = yield _this2.cache.get(ClientCredentialsStrategy.cacheKey);\n      return token;\n    })();\n  }\n\n  removeAccessToken() {\n    this.cache.remove(ClientCredentialsStrategy.cacheKey);\n  }\n\n  getTokenFromApi() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const options = {\n        grant_type: 'client_credentials',\n        scope: _this3.scopes.join(' ')\n      };\n      const bodyAsString = Object.keys(options).map(key => key + '=' + options[key]).join('&');\n      const hasBuffer = typeof Buffer !== 'undefined';\n      const credentials = `${_this3.clientId}:${_this3.clientSecret}`;\n      const basicAuth = hasBuffer ? Buffer.from(credentials).toString('base64') : btoa(credentials);\n      const result = yield fetch(\"https://accounts.spotify.com/api/token\", {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n          \"Authorization\": `Basic ${basicAuth}`\n        },\n        body: bodyAsString\n      });\n\n      if (result.status !== 200) {\n        throw new Error(\"Failed to get access token.\");\n      }\n\n      const json = yield result.json();\n      return json;\n    })();\n  }\n\n}","map":{"version":3,"sources":["/Users/kylenewins/Documents/The Moat/the_moat_io/node_modules/@spotify/web-api-ts-sdk/dist/mjs/auth/ClientCredentialsStrategy.js"],"names":["AccessTokenHelpers","ClientCredentialsStrategy","clientId","clientSecret","scopes","cacheKey","configuration","cache","cachingStrategy","constructor","setConfiguration","getOrCreateAccessToken","token","getOrCreate","getTokenFromApi","toCachable","_","refreshed","getAccessToken","get","removeAccessToken","remove","options","grant_type","scope","join","bodyAsString","Object","keys","map","key","hasBuffer","Buffer","credentials","basicAuth","from","toString","btoa","result","fetch","method","headers","body","status","Error","json"],"mappings":"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","sourcesContent":["import AccessTokenHelpers from \"./AccessTokenHelpers.js\";\nexport default class ClientCredentialsStrategy {\n    clientId;\n    clientSecret;\n    scopes;\n    static cacheKey = \"spotify-sdk:ClientCredentialsStrategy:token\";\n    configuration = null;\n    get cache() { return this.configuration.cachingStrategy; }\n    constructor(clientId, clientSecret, scopes = []) {\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        this.scopes = scopes;\n    }\n    setConfiguration(configuration) {\n        this.configuration = configuration;\n    }\n    async getOrCreateAccessToken() {\n        const token = await this.cache.getOrCreate(ClientCredentialsStrategy.cacheKey, async () => {\n            const token = await this.getTokenFromApi();\n            return AccessTokenHelpers.toCachable(token);\n        }, async (_) => {\n            const refreshed = await this.getTokenFromApi();\n            return AccessTokenHelpers.toCachable(refreshed);\n        });\n        return token;\n    }\n    async getAccessToken() {\n        const token = await this.cache.get(ClientCredentialsStrategy.cacheKey);\n        return token;\n    }\n    removeAccessToken() {\n        this.cache.remove(ClientCredentialsStrategy.cacheKey);\n    }\n    async getTokenFromApi() {\n        const options = {\n            grant_type: 'client_credentials',\n            scope: this.scopes.join(' ')\n        };\n        const bodyAsString = Object.keys(options).map(key => key + '=' + options[key]).join('&');\n        const hasBuffer = typeof Buffer !== 'undefined';\n        const credentials = `${this.clientId}:${this.clientSecret}`;\n        const basicAuth = hasBuffer\n            ? Buffer.from(credentials).toString('base64')\n            : btoa(credentials);\n        const result = await fetch(\"https://accounts.spotify.com/api/token\", {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                \"Authorization\": `Basic ${basicAuth}`\n            },\n            body: bodyAsString\n        });\n        if (result.status !== 200) {\n            throw new Error(\"Failed to get access token.\");\n        }\n        const json = await result.json();\n        return json;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}