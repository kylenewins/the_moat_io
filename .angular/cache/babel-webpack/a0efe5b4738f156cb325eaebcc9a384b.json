{"ast":null,"code":"import _asyncToGenerator from \"/Users/kylenewins/Documents/The Moat/the_moat_io/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport AccessTokenHelpers from \"./AccessTokenHelpers.js\";\nimport { emptyAccessToken } from \"./IAuthStrategy.js\";\nexport default class AuthorizationCodeWithPKCEStrategy {\n  clientId;\n  redirectUri;\n  scopes;\n  static cacheKey = \"spotify-sdk:AuthorizationCodeWithPKCEStrategy:token\";\n  configuration = null;\n\n  get cache() {\n    return this.configuration.cachingStrategy;\n  }\n\n  constructor(clientId, redirectUri, scopes) {\n    this.clientId = clientId;\n    this.redirectUri = redirectUri;\n    this.scopes = scopes;\n  }\n\n  setConfiguration(configuration) {\n    this.configuration = configuration;\n  }\n\n  getOrCreateAccessToken() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const token = yield _this.cache.getOrCreate(AuthorizationCodeWithPKCEStrategy.cacheKey, /*#__PURE__*/_asyncToGenerator(function* () {\n        const token = yield _this.redirectOrVerifyToken();\n        return AccessTokenHelpers.toCachable(token);\n      }), /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (expiring) {\n          return AccessTokenHelpers.refreshCachedAccessToken(_this.clientId, expiring);\n        });\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n      return token;\n    })();\n  }\n\n  getAccessToken() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const token = yield _this2.cache.get(AuthorizationCodeWithPKCEStrategy.cacheKey);\n      return token;\n    })();\n  }\n\n  removeAccessToken() {\n    this.cache.remove(AuthorizationCodeWithPKCEStrategy.cacheKey);\n  }\n\n  redirectOrVerifyToken() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const hashParams = new URLSearchParams(window.location.search);\n      const code = hashParams.get(\"code\");\n\n      if (code) {\n        const token = yield _this3.verifyAndExchangeCode(code);\n\n        _this3.removeCodeFromUrl();\n\n        return token;\n      }\n\n      _this3.redirectToSpotify();\n\n      return emptyAccessToken; // Redirected away at this point, just make TypeScript happy :)         \n    })();\n  }\n\n  redirectToSpotify() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const verifier = AccessTokenHelpers.generateCodeVerifier(128);\n      const challenge = yield AccessTokenHelpers.generateCodeChallenge(verifier);\n      const singleUseVerifier = {\n        verifier,\n        expiresOnAccess: true\n      };\n\n      _this4.cache.setCacheItem(\"spotify-sdk:verifier\", singleUseVerifier);\n\n      const redirectTarget = yield _this4.generateRedirectUrlForUser(_this4.scopes, challenge);\n      yield _this4.configuration.redirectionStrategy.redirect(redirectTarget);\n    })();\n  }\n\n  verifyAndExchangeCode(code) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const cachedItem = yield _this5.cache.get(\"spotify-sdk:verifier\");\n      const verifier = cachedItem?.verifier;\n\n      if (!verifier) {\n        throw new Error(\"No verifier found in cache - can't validate query string callback parameters.\");\n      }\n\n      yield _this5.configuration.redirectionStrategy.onReturnFromRedirect();\n      return yield _this5.exchangeCodeForToken(code, verifier);\n    })();\n  }\n\n  removeCodeFromUrl() {\n    const url = new URL(window.location.href);\n    url.searchParams.delete(\"code\");\n    const newUrl = url.search ? url.href : url.href.replace('?', '');\n    window.history.replaceState({}, document.title, newUrl);\n  }\n\n  generateRedirectUrlForUser(scopes, challenge) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      const scope = scopes.join(' ');\n      const params = new URLSearchParams();\n      params.append(\"client_id\", _this6.clientId);\n      params.append(\"response_type\", \"code\");\n      params.append(\"redirect_uri\", _this6.redirectUri);\n      params.append(\"scope\", scope);\n      params.append(\"code_challenge_method\", \"S256\");\n      params.append(\"code_challenge\", challenge);\n      return `https://accounts.spotify.com/authorize?${params.toString()}`;\n    })();\n  }\n\n  exchangeCodeForToken(code, verifier) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      const params = new URLSearchParams();\n      params.append(\"client_id\", _this7.clientId);\n      params.append(\"grant_type\", \"authorization_code\");\n      params.append(\"code\", code);\n      params.append(\"redirect_uri\", _this7.redirectUri);\n      params.append(\"code_verifier\", verifier);\n      const result = yield fetch(\"https://accounts.spotify.com/api/token\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        body: params\n      });\n      const text = yield result.text();\n\n      if (!result.ok) {\n        throw new Error(`Failed to exchange code for token: ${result.statusText}, ${text}`);\n      }\n\n      const json = JSON.parse(text);\n      return json;\n    })();\n  }\n\n}","map":{"version":3,"sources":["/Users/kylenewins/Documents/The Moat/the_moat_io/node_modules/@spotify/web-api-ts-sdk/dist/mjs/auth/AuthorizationCodeWithPKCEStrategy.js"],"names":["AccessTokenHelpers","emptyAccessToken","AuthorizationCodeWithPKCEStrategy","clientId","redirectUri","scopes","cacheKey","configuration","cache","cachingStrategy","constructor","setConfiguration","getOrCreateAccessToken","token","getOrCreate","redirectOrVerifyToken","toCachable","expiring","refreshCachedAccessToken","getAccessToken","get","removeAccessToken","remove","hashParams","URLSearchParams","window","location","search","code","verifyAndExchangeCode","removeCodeFromUrl","redirectToSpotify","verifier","generateCodeVerifier","challenge","generateCodeChallenge","singleUseVerifier","expiresOnAccess","setCacheItem","redirectTarget","generateRedirectUrlForUser","redirectionStrategy","redirect","cachedItem","Error","onReturnFromRedirect","exchangeCodeForToken","url","URL","href","searchParams","delete","newUrl","replace","history","replaceState","document","title","scope","join","params","append","toString","result","fetch","method","headers","body","text","ok","statusText","json","JSON","parse"],"mappings":"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","sourcesContent":["import AccessTokenHelpers from \"./AccessTokenHelpers.js\";\nimport { emptyAccessToken } from \"./IAuthStrategy.js\";\nexport default class AuthorizationCodeWithPKCEStrategy {\n    clientId;\n    redirectUri;\n    scopes;\n    static cacheKey = \"spotify-sdk:AuthorizationCodeWithPKCEStrategy:token\";\n    configuration = null;\n    get cache() { return this.configuration.cachingStrategy; }\n    constructor(clientId, redirectUri, scopes) {\n        this.clientId = clientId;\n        this.redirectUri = redirectUri;\n        this.scopes = scopes;\n    }\n    setConfiguration(configuration) {\n        this.configuration = configuration;\n    }\n    async getOrCreateAccessToken() {\n        const token = await this.cache.getOrCreate(AuthorizationCodeWithPKCEStrategy.cacheKey, async () => {\n            const token = await this.redirectOrVerifyToken();\n            return AccessTokenHelpers.toCachable(token);\n        }, async (expiring) => {\n            return AccessTokenHelpers.refreshCachedAccessToken(this.clientId, expiring);\n        });\n        return token;\n    }\n    async getAccessToken() {\n        const token = await this.cache.get(AuthorizationCodeWithPKCEStrategy.cacheKey);\n        return token;\n    }\n    removeAccessToken() {\n        this.cache.remove(AuthorizationCodeWithPKCEStrategy.cacheKey);\n    }\n    async redirectOrVerifyToken() {\n        const hashParams = new URLSearchParams(window.location.search);\n        const code = hashParams.get(\"code\");\n        if (code) {\n            const token = await this.verifyAndExchangeCode(code);\n            this.removeCodeFromUrl();\n            return token;\n        }\n        this.redirectToSpotify();\n        return emptyAccessToken; // Redirected away at this point, just make TypeScript happy :)         \n    }\n    async redirectToSpotify() {\n        const verifier = AccessTokenHelpers.generateCodeVerifier(128);\n        const challenge = await AccessTokenHelpers.generateCodeChallenge(verifier);\n        const singleUseVerifier = { verifier, expiresOnAccess: true };\n        this.cache.setCacheItem(\"spotify-sdk:verifier\", singleUseVerifier);\n        const redirectTarget = await this.generateRedirectUrlForUser(this.scopes, challenge);\n        await this.configuration.redirectionStrategy.redirect(redirectTarget);\n    }\n    async verifyAndExchangeCode(code) {\n        const cachedItem = await this.cache.get(\"spotify-sdk:verifier\");\n        const verifier = cachedItem?.verifier;\n        if (!verifier) {\n            throw new Error(\"No verifier found in cache - can't validate query string callback parameters.\");\n        }\n        await this.configuration.redirectionStrategy.onReturnFromRedirect();\n        return await this.exchangeCodeForToken(code, verifier);\n    }\n    removeCodeFromUrl() {\n        const url = new URL(window.location.href);\n        url.searchParams.delete(\"code\");\n        const newUrl = url.search ? url.href : url.href.replace('?', '');\n        window.history.replaceState({}, document.title, newUrl);\n    }\n    async generateRedirectUrlForUser(scopes, challenge) {\n        const scope = scopes.join(' ');\n        const params = new URLSearchParams();\n        params.append(\"client_id\", this.clientId);\n        params.append(\"response_type\", \"code\");\n        params.append(\"redirect_uri\", this.redirectUri);\n        params.append(\"scope\", scope);\n        params.append(\"code_challenge_method\", \"S256\");\n        params.append(\"code_challenge\", challenge);\n        return `https://accounts.spotify.com/authorize?${params.toString()}`;\n    }\n    async exchangeCodeForToken(code, verifier) {\n        const params = new URLSearchParams();\n        params.append(\"client_id\", this.clientId);\n        params.append(\"grant_type\", \"authorization_code\");\n        params.append(\"code\", code);\n        params.append(\"redirect_uri\", this.redirectUri);\n        params.append(\"code_verifier\", verifier);\n        const result = await fetch(\"https://accounts.spotify.com/api/token\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n            body: params\n        });\n        const text = await result.text();\n        if (!result.ok) {\n            throw new Error(`Failed to exchange code for token: ${result.statusText}, ${text}`);\n        }\n        const json = JSON.parse(text);\n        return json;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}