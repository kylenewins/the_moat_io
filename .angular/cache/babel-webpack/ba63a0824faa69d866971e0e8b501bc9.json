{"ast":null,"code":"import _asyncToGenerator from \"/Users/kylenewins/Documents/The Moat/the_moat_io/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Crypto } from \"./Crypto.js\";\nexport default class AccessTokenHelpers {\n  static refreshCachedAccessToken(clientId, item) {\n    return _asyncToGenerator(function* () {\n      const updated = yield AccessTokenHelpers.refreshToken(clientId, item.refresh_token);\n      return AccessTokenHelpers.toCachable(updated);\n    })();\n  }\n\n  static toCachable(item) {\n    if (item.expires && item.expires === -1) {\n      return item;\n    }\n\n    return { ...item,\n      expires: this.calculateExpiry(item)\n    };\n  }\n\n  static calculateExpiry(item) {\n    return Date.now() + item.expires_in * 1000;\n  }\n\n  static refreshToken(clientId, refreshToken) {\n    return _asyncToGenerator(function* () {\n      const params = new URLSearchParams();\n      params.append(\"client_id\", clientId);\n      params.append(\"grant_type\", \"refresh_token\");\n      params.append(\"refresh_token\", refreshToken);\n      const result = yield fetch(\"https://accounts.spotify.com/api/token\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        body: params\n      });\n      const text = yield result.text();\n\n      if (!result.ok) {\n        throw new Error(`Failed to refresh token: ${result.statusText}, ${text}`);\n      }\n\n      const json = JSON.parse(text);\n      return json;\n    })();\n  }\n\n  static generateCodeVerifier(length) {\n    let text = '';\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n    for (let i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n\n    return text;\n  }\n\n  static generateCodeChallenge(codeVerifier) {\n    return _asyncToGenerator(function* () {\n      const data = new TextEncoder().encode(codeVerifier);\n      const digest = yield Crypto.current.subtle.digest('SHA-256', data);\n      const digestBytes = [...new Uint8Array(digest)];\n      const hasBuffer = typeof Buffer !== 'undefined';\n      const digestAsBase64 = hasBuffer ? Buffer.from(digest).toString('base64') : btoa(String.fromCharCode.apply(null, digestBytes));\n      return digestAsBase64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n    })();\n  }\n\n} //# sourceMappingURL=AccessTokenHelpers.js.map","map":null,"metadata":{},"sourceType":"module"}