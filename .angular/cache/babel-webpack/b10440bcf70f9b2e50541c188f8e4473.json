{"ast":null,"code":"import _asyncToGenerator from \"/Users/kylenewins/Documents/The Moat/the_moat_io/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport AccessTokenHelpers from \"./AccessTokenHelpers.js\";\n/**\n * This strategy is used when you already have an access token and want to use it.\n * The authentication strategy will automatically renew the token when it expires.\n * Designed to allow a browser-based-app to post the access token to the server and use it from there.\n * @constructor\n * @param {string} clientId - Spotify application client id.\n * @param {string} accessToken - The access token returned from a client side Authorization Code with PKCE flow.\n */\n\nexport default class ProvidedAccessTokenStrategy {\n  clientId;\n  accessToken;\n  refreshTokenAction;\n\n  constructor(clientId, accessToken, refreshTokenAction) {\n    this.clientId = clientId;\n    this.accessToken = accessToken;\n    this.refreshTokenAction = refreshTokenAction || AccessTokenHelpers.refreshCachedAccessToken; // If the raw token from the jwt response is provided here\n    // Calculate an absolute `expiry` value.\n    // Caveat: If this token isn't fresh, this value will be off.\n    // It's the responsibility of the calling code to either set a valid\n    // expires property, or ensure expires_in accounts for any lag between\n    // issuing and passing here.\n\n    if (!this.accessToken.expires) {\n      this.accessToken.expires = AccessTokenHelpers.calculateExpiry(this.accessToken);\n    }\n  }\n\n  setConfiguration(_) {}\n\n  getOrCreateAccessToken() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.accessToken.expires && _this.accessToken.expires <= Date.now()) {\n        const refreshed = yield _this.refreshTokenAction(_this.clientId, _this.accessToken);\n        _this.accessToken = refreshed;\n      }\n\n      return _this.accessToken;\n    })();\n  }\n\n  getAccessToken() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this2.accessToken;\n    })();\n  }\n\n  removeAccessToken() {\n    this.accessToken = {\n      access_token: \"\",\n      token_type: \"\",\n      expires_in: 0,\n      refresh_token: \"\",\n      expires: 0\n    };\n  }\n\n} //# sourceMappingURL=ProvidedAccessTokenStrategy.js.map","map":null,"metadata":{},"sourceType":"module"}