{"ast":null,"code":"import _asyncToGenerator from \"/Users/kylenewins/Documents/The Moat/the_moat_io/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport EndpointsBase from './EndpointsBase.js';\nexport default class PlaylistsEndpoints extends EndpointsBase {\n  getPlaylist(playlist_id, market, fields, additional_types) {\n    // TODO: better support for fields\n    const params = this.paramsFor({\n      market,\n      fields,\n      additional_types: additional_types?.join(',')\n    });\n    return this.getRequest(`playlists/${playlist_id}${params}`);\n  }\n\n  getPlaylistItems(playlist_id, market, fields, limit, offset, additional_types) {\n    // TODO: better support for fields\n    const params = this.paramsFor({\n      market,\n      fields,\n      limit,\n      offset,\n      additional_types: additional_types?.join(',')\n    });\n    return this.getRequest(`playlists/${playlist_id}/tracks${params}`);\n  }\n\n  changePlaylistDetails(playlist_id, request) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.putRequest(`playlists/${playlist_id}`, request);\n    })();\n  }\n\n  movePlaylistItems(playlist_id, range_start, range_length, moveToPosition) {\n    return this.updatePlaylistItems(playlist_id, {\n      range_start,\n      range_length,\n      insert_before: moveToPosition\n    });\n  }\n\n  updatePlaylistItems(playlist_id, request) {\n    return this.putRequest(`playlists/${playlist_id}/tracks`, request);\n  }\n\n  addItemsToPlaylist(playlist_id, uris, position) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.postRequest(`playlists/${playlist_id}/tracks`, {\n        position,\n        uris: uris\n      });\n    })();\n  }\n\n  removeItemsFromPlaylist(playlist_id, request) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this3.deleteRequest(`playlists/${playlist_id}/tracks`, request);\n    })();\n  }\n\n  getUsersPlaylists(user_id, limit, offset) {\n    const params = this.paramsFor({\n      limit,\n      offset\n    });\n    return this.getRequest(`users/${user_id}/playlists${params}`);\n  }\n\n  createPlaylist(user_id, request) {\n    return this.postRequest(`users/${user_id}/playlists`, request);\n  }\n\n  getPlaylistCoverImage(playlist_id) {\n    return this.getRequest(`playlists/${playlist_id}/images`);\n  }\n\n  addCustomPlaylistCoverImage(playlist_id, imageData) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      let base64EncodedJpeg = \"\";\n\n      if (imageData instanceof Buffer) {\n        base64EncodedJpeg = imageData.toString(\"base64\");\n      } else if (imageData instanceof HTMLCanvasElement) {\n        base64EncodedJpeg = imageData.toDataURL(\"image/jpeg\").split(';base64,')[1];\n      } else if (imageData instanceof HTMLImageElement) {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = imageData.width;\n        canvas.height = imageData.height;\n        const ctx = canvas.getContext(\"2d\");\n\n        if (!ctx) {\n          throw new Error(\"Could not get canvas context\");\n        }\n\n        ctx.drawImage(imageData, 0, 0);\n        base64EncodedJpeg = canvas.toDataURL(\"image/jpeg\").split(';base64,')[1];\n      } else if (typeof imageData === \"string\") {\n        base64EncodedJpeg = imageData;\n      } else {\n        throw new Error(\"ImageData must be a Buffer, HTMLImageElement, HTMLCanvasElement, or string containing a base64 encoded jpeg\");\n      }\n\n      yield _this4.addCustomPlaylistCoverImageFromBase64String(playlist_id, base64EncodedJpeg);\n    })();\n  }\n\n  addCustomPlaylistCoverImageFromBase64String(playlist_id, base64EncodedJpeg) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this5.putRequest(`playlists/${playlist_id}/images`, base64EncodedJpeg, \"image/jpeg\");\n    })();\n  }\n\n}","map":{"version":3,"sources":["/Users/kylenewins/Documents/The Moat/the_moat_io/node_modules/@spotify/web-api-ts-sdk/dist/mjs/endpoints/PlaylistsEndpoints.js"],"names":["EndpointsBase","PlaylistsEndpoints","getPlaylist","playlist_id","market","fields","additional_types","params","paramsFor","join","getRequest","getPlaylistItems","limit","offset","changePlaylistDetails","request","putRequest","movePlaylistItems","range_start","range_length","moveToPosition","updatePlaylistItems","insert_before","addItemsToPlaylist","uris","position","postRequest","removeItemsFromPlaylist","deleteRequest","getUsersPlaylists","user_id","createPlaylist","getPlaylistCoverImage","addCustomPlaylistCoverImage","imageData","base64EncodedJpeg","Buffer","toString","HTMLCanvasElement","toDataURL","split","HTMLImageElement","canvas","document","createElement","width","height","ctx","getContext","Error","drawImage","addCustomPlaylistCoverImageFromBase64String"],"mappings":"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","sourcesContent":["import EndpointsBase from './EndpointsBase.js';\nexport default class PlaylistsEndpoints extends EndpointsBase {\n    getPlaylist(playlist_id, market, fields, additional_types) {\n        // TODO: better support for fields\n        const params = this.paramsFor({ market, fields, additional_types: additional_types?.join(',') });\n        return this.getRequest(`playlists/${playlist_id}${params}`);\n    }\n    getPlaylistItems(playlist_id, market, fields, limit, offset, additional_types) {\n        // TODO: better support for fields\n        const params = this.paramsFor({ market, fields, limit, offset, additional_types: additional_types?.join(',') });\n        return this.getRequest(`playlists/${playlist_id}/tracks${params}`);\n    }\n    async changePlaylistDetails(playlist_id, request) {\n        await this.putRequest(`playlists/${playlist_id}`, request);\n    }\n    movePlaylistItems(playlist_id, range_start, range_length, moveToPosition) {\n        return this.updatePlaylistItems(playlist_id, {\n            range_start,\n            range_length,\n            insert_before: moveToPosition\n        });\n    }\n    updatePlaylistItems(playlist_id, request) {\n        return this.putRequest(`playlists/${playlist_id}/tracks`, request);\n    }\n    async addItemsToPlaylist(playlist_id, uris, position) {\n        await this.postRequest(`playlists/${playlist_id}/tracks`, { position, uris: uris });\n    }\n    async removeItemsFromPlaylist(playlist_id, request) {\n        await this.deleteRequest(`playlists/${playlist_id}/tracks`, request);\n    }\n    getUsersPlaylists(user_id, limit, offset) {\n        const params = this.paramsFor({ limit, offset });\n        return this.getRequest(`users/${user_id}/playlists${params}`);\n    }\n    createPlaylist(user_id, request) {\n        return this.postRequest(`users/${user_id}/playlists`, request);\n    }\n    getPlaylistCoverImage(playlist_id) {\n        return this.getRequest(`playlists/${playlist_id}/images`);\n    }\n    async addCustomPlaylistCoverImage(playlist_id, imageData) {\n        let base64EncodedJpeg = \"\";\n        if (imageData instanceof Buffer) {\n            base64EncodedJpeg = imageData.toString(\"base64\");\n        }\n        else if (imageData instanceof HTMLCanvasElement) {\n            base64EncodedJpeg = imageData.toDataURL(\"image/jpeg\").split(';base64,')[1];\n        }\n        else if (imageData instanceof HTMLImageElement) {\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = imageData.width;\n            canvas.height = imageData.height;\n            const ctx = canvas.getContext(\"2d\");\n            if (!ctx) {\n                throw new Error(\"Could not get canvas context\");\n            }\n            ctx.drawImage(imageData, 0, 0);\n            base64EncodedJpeg = canvas.toDataURL(\"image/jpeg\").split(';base64,')[1];\n        }\n        else if (typeof imageData === \"string\") {\n            base64EncodedJpeg = imageData;\n        }\n        else {\n            throw new Error(\"ImageData must be a Buffer, HTMLImageElement, HTMLCanvasElement, or string containing a base64 encoded jpeg\");\n        }\n        await this.addCustomPlaylistCoverImageFromBase64String(playlist_id, base64EncodedJpeg);\n    }\n    async addCustomPlaylistCoverImageFromBase64String(playlist_id, base64EncodedJpeg) {\n        await this.putRequest(`playlists/${playlist_id}/images`, base64EncodedJpeg, \"image/jpeg\");\n    }\n}\n"]},"metadata":{},"sourceType":"module"}